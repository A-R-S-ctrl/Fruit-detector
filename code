import cv2
import numpy as np
import time

def canny(image):
    average = np.median(image)
    percentage = 0.33
    lower = int(max(0, (1.0 - percentage) * average))
    upper = int(min(255, (1.0 + percentage) * average))
    edges = cv2.Canny(image, lower, upper)
    return edges

def area(img,lower,upper,it,lower1 = 0,upper1 = 0,apple = False):
    kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (3,3))
    hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)
    if apple:
        print "hi"
        mask1 = cv2.inRange(hsv,lower,upper)
        mask2 = cv2.inRange(hsv,lower1,upper1)
        mask = cv2.bitwise_or(mask1,mask2)
    else: mask = cv2.inRange(hsv,lower,upper)
    dilate = cv2.dilate(mask,kernel,iterations = it)
    edges = canny(dilate)
    if dilate.any():
        ret, contours, hierarchy = cv2.findContours(edges.copy(),cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
        cnts = sorted(contours, key = cv2.contourArea, reverse = True)[:1]
        if len(cnts)>0:
            rect = cv2.minAreaRect(cnts[0])
            box = cv2.boxPoints(rect)
            box = np.int0(box)
            return cnts[0],box
    else:  return None, 0

def findfruit(apple,blueberry,orange):
    a,b,o = 0,1,2
    if isinstance(apple, np.ndarray): a = cv2.contourArea(apple)
    if isinstance(blueberry, np.ndarray): b = cv2.contourArea(blueberry)
    if isinstance(orange, np.ndarray): o = cv2.contourArea(orange)
    if a > b:
        if a > o: cnt, fruit = apple, "apple" 
        else: cnt, fruit = orange, "orange"
    else:
        if b > o: cnt, fruit = blueberry, "blueberry"
        else: cnt, fruit = orange, "orange"
    AREA = cv2.contourArea(cnt)
    if AREA > 6500 : size = "large"
    elif AREA < 2600 : size = "small"
    else : size = "medium"
    print fruit + '-' , AREA
    return fruit,AREA 

def identify_fruit():        
    cam=cv2.VideoCapture(0)
    time.sleep(1)
    retval, img = cam.read()
    original = img.copy()
    h,w,c = img.shape    
    print h,w
    box = {}
    img = img[int(h*0.05):int(h),int(w*0.250):int(w*0.66)]

    blue_lower = np.array([80,70,20])
    blue_upper = np.array([130,255,240])
    red_lower1 = np.array([0,10,10])
    red_upper1 = np.array([9,255,255])
    red_lower2 = np.array([160,20,20])
    red_upper2 = np.array([180,255,255])
    orange_lower = np.array([11,50,60])
    orange_upper = np.array([28,255,255])
    
    blueberry, box["blueberry"] = area(img,blue_lower,blue_upper,2, False)
    apple, box["apple"] = area(img,red_lower1,red_upper1,3,red_lower2,red_upper2, True)
    orange, box["orange"] = area(img,orange_lower,orange_upper,2, False)
    fruit, size = findfruit(apple, blueberry, orange)
    cv2.drawContours(img,[box[fruit]],0,(0,255,0),2)
    M = cv2.moments(box)              
    centroidx = cx = int(M['m10'] / M['m00'])
    centroidy = cy = int(M['m01'] / M['m00'])
    cv2.circle(img,(cx,cy),5, (0,255,0),-1);
    cv2.imshow('image',img)
    cv2.waitKey(0)    
    cv2.destroyAllWindows()
    time.sleep(5)
    cam.release()
    return fruit
